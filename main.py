import numpy as np
import matplotlib.pyplot as plt
import random

def print_pattern(pattern):
    plt.matshow(pattern)
    plt.show()



pattern_0 = np.array([[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                      [-1,-1,-1, 1, 1, 1, 1,-1,-1,-1],
                      [-1,-1, 1, 1, 1, 1, 1, 1,-1,-1],
                      [-1, 1, 1, 1,-1,-1, 1, 1, 1,-1],
                      [-1, 1, 1, 1,-1,-1, 1, 1, 1,-1],
                      [-1, 1, 1, 1,-1,-1, 1, 1, 1,-1],
                      [-1, 1, 1, 1,-1,-1, 1, 1, 1,-1],
                      [-1, 1, 1, 1,-1,-1, 1, 1, 1,-1],
                      [-1, 1, 1, 1,-1,-1, 1, 1, 1,-1],
                      [-1,-1, 1, 1, 1, 1, 1, 1,-1,-1],
                      [-1,-1,-1, 1, 1, 1, 1,-1,-1,-1],
                      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]])

pattern_1 = np.array([[-1,-1,-1, 1, 1, 1, 1,-1,-1,-1],
                      [-1,-1,-1, 1, 1, 1, 1,-1,-1,-1],
                      [-1,-1,-1, 1, 1, 1, 1,-1,-1,-1],
                      [-1,-1,-1, 1, 1, 1, 1,-1,-1,-1],
                      [-1,-1,-1, 1, 1, 1, 1,-1,-1,-1],
                      [-1,-1,-1, 1, 1, 1, 1,-1,-1,-1],
                      [-1,-1,-1, 1, 1, 1, 1,-1,-1,-1],
                      [-1,-1,-1, 1, 1, 1, 1,-1,-1,-1],
                      [-1,-1,-1, 1, 1, 1, 1,-1,-1,-1],
                      [-1,-1,-1, 1, 1, 1, 1,-1,-1,-1],
                      [-1,-1,-1, 1, 1, 1, 1,-1,-1,-1],
                      [-1,-1,-1, 1, 1, 1, 1,-1,-1,-1]])

pattern_2 = np.array([[ 1, 1, 1, 1, 1, 1, 1, 1,-1,-1],
                      [ 1, 1, 1, 1, 1, 1, 1, 1,-1,-1],
                      [-1,-1,-1,-1,-1,-1, 1, 1,-1,-1],
                      [-1,-1,-1,-1,-1,-1, 1, 1,-1,-1],
                      [-1,-1,-1,-1,-1,-1, 1, 1,-1,-1],
                      [ 1, 1, 1, 1, 1, 1, 1, 1,-1,-1],
                      [ 1, 1, 1, 1, 1, 1, 1, 1,-1,-1],
                      [ 1, 1,-1,-1,-1,-1,-1,-1,-1,-1],
                      [ 1, 1,-1,-1,-1,-1,-1,-1,-1,-1],
                      [ 1, 1,-1,-1,-1,-1,-1,-1,-1,-1],
                      [ 1, 1, 1, 1, 1, 1, 1, 1,-1,-1],
                      [ 1, 1, 1, 1, 1, 1, 1, 1,-1,-1]])

pattern_3 = np.array([[-1,-1, 1, 1, 1, 1, 1, 1,-1,-1],
                      [-1,-1, 1, 1, 1, 1, 1, 1, 1,-1],
                      [-1,-1,-1,-1,-1,-1,-1, 1, 1,-1],
                      [-1,-1,-1,-1,-1,-1,-1, 1, 1,-1],
                      [-1,-1,-1,-1,-1,-1,-1, 1, 1,-1],
                      [-1,-1,-1,-1, 1, 1, 1, 1,-1,-1],
                      [-1,-1,-1,-1, 1, 1, 1, 1,-1,-1],
                      [-1,-1,-1,-1,-1,-1,-1, 1, 1,-1],
                      [-1,-1,-1,-1,-1,-1,-1, 1, 1,-1],
                      [-1,-1,-1,-1,-1,-1,-1, 1, 1,-1],
                      [-1,-1, 1, 1, 1, 1, 1, 1, 1,-1],
                      [-1,-1, 1, 1, 1, 1, 1, 1,-1,-1]])

pattern_4 = np.array([[-1, 1, 1,-1,-1,-1,-1, 1, 1,-1],
                      [-1, 1, 1,-1,-1,-1,-1, 1, 1,-1],
                      [-1, 1, 1,-1,-1,-1,-1, 1, 1,-1],
                      [-1, 1, 1,-1,-1,-1,-1, 1, 1,-1],
                      [-1, 1, 1,-1,-1,-1,-1, 1, 1,-1],
                      [-1, 1, 1, 1, 1, 1, 1, 1, 1,-1],
                      [-1, 1, 1, 1, 1, 1, 1, 1, 1,-1],
                      [-1,-1,-1,-1,-1,-1,-1, 1, 1,-1],
                      [-1,-1,-1,-1,-1,-1,-1, 1, 1,-1],
                      [-1,-1,-1,-1,-1,-1,-1, 1, 1,-1],
                      [-1,-1,-1,-1,-1,-1,-1, 1, 1,-1],
                      [-1,-1,-1,-1,-1,-1,-1, 1, 1,-1]])

pattern_6 = np.array([[ 1, 1, 1, 1, 1, 1,-1,-1,-1,-1],
                      [ 1, 1, 1, 1, 1, 1,-1,-1,-1,-1],
                      [ 1, 1,-1,-1,-1,-1,-1,-1,-1,-1],
                      [ 1, 1,-1,-1,-1,-1,-1,-1,-1,-1],
                      [ 1, 1,-1,-1,-1,-1,-1,-1,-1,-1],
                      [ 1, 1, 1, 1, 1, 1,-1,-1,-1,-1],
                      [ 1, 1, 1, 1, 1, 1,-1,-1,-1,-1],
                      [ 1, 1,-1,-1, 1, 1,-1,-1,-1,-1],
                      [ 1, 1,-1,-1, 1, 1,-1,-1,-1,-1],
                      [ 1, 1,-1,-1, 1, 1,-1,-1,-1,-1],
                      [ 1, 1, 1, 1, 1, 1,-1,-1,-1,-1],
                      [ 1, 1, 1, 1, 1, 1,-1,-1,-1,-1]])

pattern_9 = np.array([[-1,-1,-1,-1, 1, 1, 1, 1, 1, 1],
                      [-1,-1,-1,-1, 1, 1, 1, 1, 1, 1],
                      [-1,-1,-1,-1, 1, 1,-1,-1, 1, 1],
                      [-1,-1,-1,-1, 1, 1,-1,-1, 1, 1],
                      [-1,-1,-1,-1, 1, 1,-1,-1, 1, 1],
                      [-1,-1,-1,-1, 1, 1, 1, 1, 1, 1],
                      [-1,-1,-1,-1, 1, 1, 1, 1, 1, 1],
                      [-1,-1,-1,-1,-1,-1,-1,-1, 1, 1],
                      [-1,-1,-1,-1,-1,-1,-1,-1, 1, 1],
                      [-1,-1,-1,-1,-1,-1,-1,-1, 1, 1],
                      [-1,-1,-1,-1, 1, 1, 1, 1, 1, 1],
                      [-1,-1,-1,-1, 1, 1, 1, 1, 1, 1]])

pattern_d = np.array([[ 1, 1, 1, 1, 1,-1,-1,-1,-1,-1],
                      [ 1, 1, 1, 1, 1,-1,-1,-1,-1,-1],
                      [ 1, 1, 1, 1, 1,-1,-1,-1,-1,-1],
                      [ 1, 1, 1, 1, 1,-1,-1,-1,-1,-1],
                      [ 1, 1, 1, 1, 1,-1,-1,-1,-1,-1],
                      [ 1, 1, 1, 1, 1,-1,-1,-1,-1,-1],
                      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
                      [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]])


def hebian_learning(patterns):
    size = len(patterns[0])
    w = np.zeros((size, size))
    for i in range(size):
        for j in range(size):
            if i!=j:
                sum = 0
                for pattern in patterns:
                    sum += pattern[i]*pattern[j]
                w[i][j] = sum

    return w

def TLU(net):
    if net>=0:
        return 1
    else:
        return -1

def recall_async(pattern, w):
    pass

def recall_sync(pattern, w):
    x = pattern
    x_next = np.vectorize(TLU)(x@w)
    while (x!=x_next).all():
        x = x_next
        x_next = np.vectorize(TLU)(x@w)
    return x_next

def noisy_pattern(pattern):
    indexes = random.sample(range(len(pattern)), (len(pattern)*25)//100)
    for index in indexes:
        if(pattern[index] == 1):
            pattern[index] = -1
        if(pattern[index] == -1):
            pattern[index] = 1
    return pattern


patterns = [pattern_0.flatten(), pattern_1.flatten(), pattern_2.flatten(), pattern_3.flatten(), pattern_4.flatten(), pattern_6.flatten(), pattern_9.flatten(), pattern_d.flatten()]
w = hebian_learning(patterns)
noisy = noisy_pattern(pattern_d.flatten())
print_pattern(noisy.reshape(12,10))
result = recall_sync(noisy,w)
print_pattern(result.reshape(12,10))


    


